// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_test_2eproto();
void protobuf_AssignDesc_test_2eproto();
void protobuf_ShutdownFile_test_2eproto();

class Test;
class Test_OptionalGroup;

enum FOO {
  X = 17
};
bool FOO_IsValid(int value);
const FOO FOO_MIN = X;
const FOO FOO_MAX = X;
const int FOO_ARRAYSIZE = FOO_MAX + 1;

const ::google::protobuf::EnumDescriptor* FOO_descriptor();
inline const ::std::string& FOO_Name(FOO value) {
  return ::google::protobuf::internal::NameOfEnum(
    FOO_descriptor(), value);
}
inline bool FOO_Parse(
    const ::std::string& name, FOO* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FOO>(
    FOO_descriptor(), name, value);
}
// ===================================================================

class Test_OptionalGroup : public ::google::protobuf::Message {
 public:
  Test_OptionalGroup();
  virtual ~Test_OptionalGroup();

  Test_OptionalGroup(const Test_OptionalGroup& from);

  inline Test_OptionalGroup& operator=(const Test_OptionalGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test_OptionalGroup& default_instance();

  void Swap(Test_OptionalGroup* other);

  // implements Message ----------------------------------------------

  Test_OptionalGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Test_OptionalGroup& from);
  void MergeFrom(const Test_OptionalGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string RequiredField = 5;
  inline bool has_requiredfield() const;
  inline void clear_requiredfield();
  static const int kRequiredFieldFieldNumber = 5;
  inline const ::std::string& requiredfield() const;
  inline void set_requiredfield(const ::std::string& value);
  inline void set_requiredfield(const char* value);
  inline void set_requiredfield(const char* value, size_t size);
  inline ::std::string* mutable_requiredfield();
  inline ::std::string* release_requiredfield();
  inline void set_allocated_requiredfield(::std::string* requiredfield);

  // @@protoc_insertion_point(class_scope:pb.Test.OptionalGroup)
 private:
  inline void set_has_requiredfield();
  inline void clear_has_requiredfield();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* requiredfield_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static Test_OptionalGroup* default_instance_;
};
// -------------------------------------------------------------------

class Test : public ::google::protobuf::Message {
 public:
  Test();
  virtual ~Test();

  Test(const Test& from);

  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test& default_instance();

  void Swap(Test* other);

  // implements Message ----------------------------------------------

  Test* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Test& from);
  void MergeFrom(const Test& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Test_OptionalGroup OptionalGroup;

  // accessors -------------------------------------------------------

  // required string label = 1;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 1;
  inline const ::std::string& label() const;
  inline void set_label(const ::std::string& value);
  inline void set_label(const char* value);
  inline void set_label(const char* value, size_t size);
  inline ::std::string* mutable_label();
  inline ::std::string* release_label();
  inline void set_allocated_label(::std::string* label);

  // optional int32 type = 2 [default = 77];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // repeated int64 reps = 3;
  inline int reps_size() const;
  inline void clear_reps();
  static const int kRepsFieldNumber = 3;
  inline ::google::protobuf::int64 reps(int index) const;
  inline void set_reps(int index, ::google::protobuf::int64 value);
  inline void add_reps(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      reps() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_reps();

  // optional group OptionalGroup = 4 {
  inline bool has_optionalgroup() const;
  inline void clear_optionalgroup();
  static const int kOptionalgroupFieldNumber = 4;
  inline const ::pb::Test_OptionalGroup& optionalgroup() const;
  inline ::pb::Test_OptionalGroup* mutable_optionalgroup();
  inline ::pb::Test_OptionalGroup* release_optionalgroup();
  inline void set_allocated_optionalgroup(::pb::Test_OptionalGroup* optionalgroup);

  // @@protoc_insertion_point(class_scope:pb.Test)
 private:
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_optionalgroup();
  inline void clear_has_optionalgroup();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* label_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > reps_;
  ::pb::Test_OptionalGroup* optionalgroup_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static Test* default_instance_;
};
// ===================================================================


// ===================================================================

// Test_OptionalGroup

// required string RequiredField = 5;
inline bool Test_OptionalGroup::has_requiredfield() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Test_OptionalGroup::set_has_requiredfield() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Test_OptionalGroup::clear_has_requiredfield() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Test_OptionalGroup::clear_requiredfield() {
  if (requiredfield_ != &::google::protobuf::internal::kEmptyString) {
    requiredfield_->clear();
  }
  clear_has_requiredfield();
}
inline const ::std::string& Test_OptionalGroup::requiredfield() const {
  return *requiredfield_;
}
inline void Test_OptionalGroup::set_requiredfield(const ::std::string& value) {
  set_has_requiredfield();
  if (requiredfield_ == &::google::protobuf::internal::kEmptyString) {
    requiredfield_ = new ::std::string;
  }
  requiredfield_->assign(value);
}
inline void Test_OptionalGroup::set_requiredfield(const char* value) {
  set_has_requiredfield();
  if (requiredfield_ == &::google::protobuf::internal::kEmptyString) {
    requiredfield_ = new ::std::string;
  }
  requiredfield_->assign(value);
}
inline void Test_OptionalGroup::set_requiredfield(const char* value, size_t size) {
  set_has_requiredfield();
  if (requiredfield_ == &::google::protobuf::internal::kEmptyString) {
    requiredfield_ = new ::std::string;
  }
  requiredfield_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Test_OptionalGroup::mutable_requiredfield() {
  set_has_requiredfield();
  if (requiredfield_ == &::google::protobuf::internal::kEmptyString) {
    requiredfield_ = new ::std::string;
  }
  return requiredfield_;
}
inline ::std::string* Test_OptionalGroup::release_requiredfield() {
  clear_has_requiredfield();
  if (requiredfield_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = requiredfield_;
    requiredfield_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Test_OptionalGroup::set_allocated_requiredfield(::std::string* requiredfield) {
  if (requiredfield_ != &::google::protobuf::internal::kEmptyString) {
    delete requiredfield_;
  }
  if (requiredfield) {
    set_has_requiredfield();
    requiredfield_ = requiredfield;
  } else {
    clear_has_requiredfield();
    requiredfield_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Test

// required string label = 1;
inline bool Test::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Test::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Test::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Test::clear_label() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    label_->clear();
  }
  clear_has_label();
}
inline const ::std::string& Test::label() const {
  return *label_;
}
inline void Test::set_label(const ::std::string& value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void Test::set_label(const char* value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void Test::set_label(const char* value, size_t size) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Test::mutable_label() {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  return label_;
}
inline ::std::string* Test::release_label() {
  clear_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = label_;
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Test::set_allocated_label(::std::string* label) {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (label) {
    set_has_label();
    label_ = label;
  } else {
    clear_has_label();
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 type = 2 [default = 77];
inline bool Test::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Test::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Test::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Test::clear_type() {
  type_ = 77;
  clear_has_type();
}
inline ::google::protobuf::int32 Test::type() const {
  return type_;
}
inline void Test::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// repeated int64 reps = 3;
inline int Test::reps_size() const {
  return reps_.size();
}
inline void Test::clear_reps() {
  reps_.Clear();
}
inline ::google::protobuf::int64 Test::reps(int index) const {
  return reps_.Get(index);
}
inline void Test::set_reps(int index, ::google::protobuf::int64 value) {
  reps_.Set(index, value);
}
inline void Test::add_reps(::google::protobuf::int64 value) {
  reps_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Test::reps() const {
  return reps_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Test::mutable_reps() {
  return &reps_;
}

// optional group OptionalGroup = 4 {
inline bool Test::has_optionalgroup() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Test::set_has_optionalgroup() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Test::clear_has_optionalgroup() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Test::clear_optionalgroup() {
  if (optionalgroup_ != NULL) optionalgroup_->::pb::Test_OptionalGroup::Clear();
  clear_has_optionalgroup();
}
inline const ::pb::Test_OptionalGroup& Test::optionalgroup() const {
  return optionalgroup_ != NULL ? *optionalgroup_ : *default_instance_->optionalgroup_;
}
inline ::pb::Test_OptionalGroup* Test::mutable_optionalgroup() {
  set_has_optionalgroup();
  if (optionalgroup_ == NULL) optionalgroup_ = new ::pb::Test_OptionalGroup;
  return optionalgroup_;
}
inline ::pb::Test_OptionalGroup* Test::release_optionalgroup() {
  clear_has_optionalgroup();
  ::pb::Test_OptionalGroup* temp = optionalgroup_;
  optionalgroup_ = NULL;
  return temp;
}
inline void Test::set_allocated_optionalgroup(::pb::Test_OptionalGroup* optionalgroup) {
  delete optionalgroup_;
  optionalgroup_ = optionalgroup;
  if (optionalgroup) {
    set_has_optionalgroup();
  } else {
    clear_has_optionalgroup();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::FOO>() {
  return ::pb::FOO_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
