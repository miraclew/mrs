// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: missle.proto

#ifndef PROTOBUF_missle_2eproto__INCLUDED
#define PROTOBUF_missle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_missle_2eproto();
void protobuf_AssignDesc_missle_2eproto();
void protobuf_ShutdownFile_missle_2eproto();

class Point;
class Player;
class CAuth;
class EAuth;
class CMatchEnter;
class EMatcInit;
class EMatchEnd;
class EMatchTurn;
class CPlayerMove;
class EPlayerMove;
class CPlayerFire;
class EPlayerFire;
class CPlayerHit;
class EPlayerHit;

enum Code {
  C_AUTH = 11,
  E_AUTH = 12,
  C_MATCH_ENTER = 21,
  E_MATCH_INIT = 22,
  E_MATCH_TURN = 23,
  E_MATCH_END = 24,
  C_PLAYER_MOVE = 31,
  E_PLAYER_MOVE = 32,
  C_PLAYER_FIRE = 33,
  E_PLAYER_FIRE = 34,
  C_PLAYER_HIT = 35,
  E_PLAYER_HIT = 36,
  C_PLAYER_HEALTH = 37
};
bool Code_IsValid(int value);
const Code Code_MIN = C_AUTH;
const Code Code_MAX = C_PLAYER_HEALTH;
const int Code_ARRAYSIZE = Code_MAX + 1;

const ::google::protobuf::EnumDescriptor* Code_descriptor();
inline const ::std::string& Code_Name(Code value) {
  return ::google::protobuf::internal::NameOfEnum(
    Code_descriptor(), value);
}
inline bool Code_Parse(
    const ::std::string& name, Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Code>(
    Code_descriptor(), name, value);
}
// ===================================================================

class Point : public ::google::protobuf::Message {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:pb.Point)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_missle_2eproto();
  friend void protobuf_AssignDesc_missle_2eproto();
  friend void protobuf_ShutdownFile_missle_2eproto();

  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// -------------------------------------------------------------------

class Player : public ::google::protobuf::Message {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Player& default_instance();

  void Swap(Player* other);

  // implements Message ----------------------------------------------

  Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // required string nickName = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required string avatar = 3;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 3;
  inline const ::std::string& avatar() const;
  inline void set_avatar(const ::std::string& value);
  inline void set_avatar(const char* value);
  inline void set_avatar(const char* value, size_t size);
  inline ::std::string* mutable_avatar();
  inline ::std::string* release_avatar();
  inline void set_allocated_avatar(::std::string* avatar);

  // required bool isLeft = 4;
  inline bool has_isleft() const;
  inline void clear_isleft();
  static const int kIsLeftFieldNumber = 4;
  inline bool isleft() const;
  inline void set_isleft(bool value);

  // required .pb.Point position = 5;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 5;
  inline const ::pb::Point& position() const;
  inline ::pb::Point* mutable_position();
  inline ::pb::Point* release_position();
  inline void set_allocated_position(::pb::Point* position);

  // required int32 health = 6;
  inline bool has_health() const;
  inline void clear_health();
  static const int kHealthFieldNumber = 6;
  inline ::google::protobuf::int32 health() const;
  inline void set_health(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.Player)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_isleft();
  inline void clear_has_isleft();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_health();
  inline void clear_has_health();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* nickname_;
  ::std::string* avatar_;
  ::pb::Point* position_;
  bool isleft_;
  ::google::protobuf::int32 health_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_missle_2eproto();
  friend void protobuf_AssignDesc_missle_2eproto();
  friend void protobuf_ShutdownFile_missle_2eproto();

  void InitAsDefaultInstance();
  static Player* default_instance_;
};
// -------------------------------------------------------------------

class CAuth : public ::google::protobuf::Message {
 public:
  CAuth();
  virtual ~CAuth();

  CAuth(const CAuth& from);

  inline CAuth& operator=(const CAuth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAuth& default_instance();

  void Swap(CAuth* other);

  // implements Message ----------------------------------------------

  CAuth* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAuth& from);
  void MergeFrom(const CAuth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userName = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:pb.CAuth)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_missle_2eproto();
  friend void protobuf_AssignDesc_missle_2eproto();
  friend void protobuf_ShutdownFile_missle_2eproto();

  void InitAsDefaultInstance();
  static CAuth* default_instance_;
};
// -------------------------------------------------------------------

class EAuth : public ::google::protobuf::Message {
 public:
  EAuth();
  virtual ~EAuth();

  EAuth(const EAuth& from);

  inline EAuth& operator=(const EAuth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EAuth& default_instance();

  void Swap(EAuth* other);

  // implements Message ----------------------------------------------

  EAuth* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EAuth& from);
  void MergeFrom(const EAuth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:pb.EAuth)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  ::google::protobuf::int32 code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_missle_2eproto();
  friend void protobuf_AssignDesc_missle_2eproto();
  friend void protobuf_ShutdownFile_missle_2eproto();

  void InitAsDefaultInstance();
  static EAuth* default_instance_;
};
// -------------------------------------------------------------------

class CMatchEnter : public ::google::protobuf::Message {
 public:
  CMatchEnter();
  virtual ~CMatchEnter();

  CMatchEnter(const CMatchEnter& from);

  inline CMatchEnter& operator=(const CMatchEnter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMatchEnter& default_instance();

  void Swap(CMatchEnter* other);

  // implements Message ----------------------------------------------

  CMatchEnter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMatchEnter& from);
  void MergeFrom(const CMatchEnter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.CMatchEnter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_missle_2eproto();
  friend void protobuf_AssignDesc_missle_2eproto();
  friend void protobuf_ShutdownFile_missle_2eproto();

  void InitAsDefaultInstance();
  static CMatchEnter* default_instance_;
};
// -------------------------------------------------------------------

class EMatcInit : public ::google::protobuf::Message {
 public:
  EMatcInit();
  virtual ~EMatcInit();

  EMatcInit(const EMatcInit& from);

  inline EMatcInit& operator=(const EMatcInit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EMatcInit& default_instance();

  void Swap(EMatcInit* other);

  // implements Message ----------------------------------------------

  EMatcInit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EMatcInit& from);
  void MergeFrom(const EMatcInit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 matchId = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchIdFieldNumber = 1;
  inline ::google::protobuf::int64 matchid() const;
  inline void set_matchid(::google::protobuf::int64 value);

  // repeated .pb.Player players = 2;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 2;
  inline const ::pb::Player& players(int index) const;
  inline ::pb::Player* mutable_players(int index);
  inline ::pb::Player* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Player >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Player >*
      mutable_players();

  // repeated .pb.Point points = 3;
  inline int points_size() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 3;
  inline const ::pb::Point& points(int index) const;
  inline ::pb::Point* mutable_points(int index);
  inline ::pb::Point* add_points();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Point >&
      points() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Point >*
      mutable_points();

  // @@protoc_insertion_point(class_scope:pb.EMatcInit)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 matchid_;
  ::google::protobuf::RepeatedPtrField< ::pb::Player > players_;
  ::google::protobuf::RepeatedPtrField< ::pb::Point > points_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_missle_2eproto();
  friend void protobuf_AssignDesc_missle_2eproto();
  friend void protobuf_ShutdownFile_missle_2eproto();

  void InitAsDefaultInstance();
  static EMatcInit* default_instance_;
};
// -------------------------------------------------------------------

class EMatchEnd : public ::google::protobuf::Message {
 public:
  EMatchEnd();
  virtual ~EMatchEnd();

  EMatchEnd(const EMatchEnd& from);

  inline EMatchEnd& operator=(const EMatchEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EMatchEnd& default_instance();

  void Swap(EMatchEnd* other);

  // implements Message ----------------------------------------------

  EMatchEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EMatchEnd& from);
  void MergeFrom(const EMatchEnd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 matchId = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchIdFieldNumber = 1;
  inline ::google::protobuf::int64 matchid() const;
  inline void set_matchid(::google::protobuf::int64 value);

  // required int32 points = 2;
  inline bool has_points() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 2;
  inline ::google::protobuf::int32 points() const;
  inline void set_points(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.EMatchEnd)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_points();
  inline void clear_has_points();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 matchid_;
  ::google::protobuf::int32 points_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_missle_2eproto();
  friend void protobuf_AssignDesc_missle_2eproto();
  friend void protobuf_ShutdownFile_missle_2eproto();

  void InitAsDefaultInstance();
  static EMatchEnd* default_instance_;
};
// -------------------------------------------------------------------

class EMatchTurn : public ::google::protobuf::Message {
 public:
  EMatchTurn();
  virtual ~EMatchTurn();

  EMatchTurn(const EMatchTurn& from);

  inline EMatchTurn& operator=(const EMatchTurn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EMatchTurn& default_instance();

  void Swap(EMatchTurn* other);

  // implements Message ----------------------------------------------

  EMatchTurn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EMatchTurn& from);
  void MergeFrom(const EMatchTurn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 matchId = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchIdFieldNumber = 1;
  inline ::google::protobuf::int64 matchid() const;
  inline void set_matchid(::google::protobuf::int64 value);

  // required int64 playerId = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.EMatchTurn)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 matchid_;
  ::google::protobuf::int64 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_missle_2eproto();
  friend void protobuf_AssignDesc_missle_2eproto();
  friend void protobuf_ShutdownFile_missle_2eproto();

  void InitAsDefaultInstance();
  static EMatchTurn* default_instance_;
};
// -------------------------------------------------------------------

class CPlayerMove : public ::google::protobuf::Message {
 public:
  CPlayerMove();
  virtual ~CPlayerMove();

  CPlayerMove(const CPlayerMove& from);

  inline CPlayerMove& operator=(const CPlayerMove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPlayerMove& default_instance();

  void Swap(CPlayerMove* other);

  // implements Message ----------------------------------------------

  CPlayerMove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPlayerMove& from);
  void MergeFrom(const CPlayerMove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 matchId = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchIdFieldNumber = 1;
  inline ::google::protobuf::int64 matchid() const;
  inline void set_matchid(::google::protobuf::int64 value);

  // required .pb.Point position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline const ::pb::Point& position() const;
  inline ::pb::Point* mutable_position();
  inline ::pb::Point* release_position();
  inline void set_allocated_position(::pb::Point* position);

  // @@protoc_insertion_point(class_scope:pb.CPlayerMove)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 matchid_;
  ::pb::Point* position_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_missle_2eproto();
  friend void protobuf_AssignDesc_missle_2eproto();
  friend void protobuf_ShutdownFile_missle_2eproto();

  void InitAsDefaultInstance();
  static CPlayerMove* default_instance_;
};
// -------------------------------------------------------------------

class EPlayerMove : public ::google::protobuf::Message {
 public:
  EPlayerMove();
  virtual ~EPlayerMove();

  EPlayerMove(const EPlayerMove& from);

  inline EPlayerMove& operator=(const EPlayerMove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EPlayerMove& default_instance();

  void Swap(EPlayerMove* other);

  // implements Message ----------------------------------------------

  EPlayerMove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EPlayerMove& from);
  void MergeFrom(const EPlayerMove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 matchId = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchIdFieldNumber = 1;
  inline ::google::protobuf::int64 matchid() const;
  inline void set_matchid(::google::protobuf::int64 value);

  // required int64 playerId = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // required .pb.Point position = 3;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline const ::pb::Point& position() const;
  inline ::pb::Point* mutable_position();
  inline ::pb::Point* release_position();
  inline void set_allocated_position(::pb::Point* position);

  // @@protoc_insertion_point(class_scope:pb.EPlayerMove)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 matchid_;
  ::google::protobuf::int64 playerid_;
  ::pb::Point* position_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_missle_2eproto();
  friend void protobuf_AssignDesc_missle_2eproto();
  friend void protobuf_ShutdownFile_missle_2eproto();

  void InitAsDefaultInstance();
  static EPlayerMove* default_instance_;
};
// -------------------------------------------------------------------

class CPlayerFire : public ::google::protobuf::Message {
 public:
  CPlayerFire();
  virtual ~CPlayerFire();

  CPlayerFire(const CPlayerFire& from);

  inline CPlayerFire& operator=(const CPlayerFire& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPlayerFire& default_instance();

  void Swap(CPlayerFire* other);

  // implements Message ----------------------------------------------

  CPlayerFire* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPlayerFire& from);
  void MergeFrom(const CPlayerFire& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 matchId = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchIdFieldNumber = 1;
  inline ::google::protobuf::int64 matchid() const;
  inline void set_matchid(::google::protobuf::int64 value);

  // required int64 playerId = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // required .pb.Point velocity = 3;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 3;
  inline const ::pb::Point& velocity() const;
  inline ::pb::Point* mutable_velocity();
  inline ::pb::Point* release_velocity();
  inline void set_allocated_velocity(::pb::Point* velocity);

  // @@protoc_insertion_point(class_scope:pb.CPlayerFire)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_velocity();
  inline void clear_has_velocity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 matchid_;
  ::google::protobuf::int64 playerid_;
  ::pb::Point* velocity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_missle_2eproto();
  friend void protobuf_AssignDesc_missle_2eproto();
  friend void protobuf_ShutdownFile_missle_2eproto();

  void InitAsDefaultInstance();
  static CPlayerFire* default_instance_;
};
// -------------------------------------------------------------------

class EPlayerFire : public ::google::protobuf::Message {
 public:
  EPlayerFire();
  virtual ~EPlayerFire();

  EPlayerFire(const EPlayerFire& from);

  inline EPlayerFire& operator=(const EPlayerFire& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EPlayerFire& default_instance();

  void Swap(EPlayerFire* other);

  // implements Message ----------------------------------------------

  EPlayerFire* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EPlayerFire& from);
  void MergeFrom(const EPlayerFire& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 matchId = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchIdFieldNumber = 1;
  inline ::google::protobuf::int64 matchid() const;
  inline void set_matchid(::google::protobuf::int64 value);

  // required int64 playerId = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // required .pb.Point velocity = 3;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 3;
  inline const ::pb::Point& velocity() const;
  inline ::pb::Point* mutable_velocity();
  inline ::pb::Point* release_velocity();
  inline void set_allocated_velocity(::pb::Point* velocity);

  // @@protoc_insertion_point(class_scope:pb.EPlayerFire)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_velocity();
  inline void clear_has_velocity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 matchid_;
  ::google::protobuf::int64 playerid_;
  ::pb::Point* velocity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_missle_2eproto();
  friend void protobuf_AssignDesc_missle_2eproto();
  friend void protobuf_ShutdownFile_missle_2eproto();

  void InitAsDefaultInstance();
  static EPlayerFire* default_instance_;
};
// -------------------------------------------------------------------

class CPlayerHit : public ::google::protobuf::Message {
 public:
  CPlayerHit();
  virtual ~CPlayerHit();

  CPlayerHit(const CPlayerHit& from);

  inline CPlayerHit& operator=(const CPlayerHit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPlayerHit& default_instance();

  void Swap(CPlayerHit* other);

  // implements Message ----------------------------------------------

  CPlayerHit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPlayerHit& from);
  void MergeFrom(const CPlayerHit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 matchId = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchIdFieldNumber = 1;
  inline ::google::protobuf::int64 matchid() const;
  inline void set_matchid(::google::protobuf::int64 value);

  // required int64 p1 = 2;
  inline bool has_p1() const;
  inline void clear_p1();
  static const int kP1FieldNumber = 2;
  inline ::google::protobuf::int64 p1() const;
  inline void set_p1(::google::protobuf::int64 value);

  // required int64 p2 = 3;
  inline bool has_p2() const;
  inline void clear_p2();
  static const int kP2FieldNumber = 3;
  inline ::google::protobuf::int64 p2() const;
  inline void set_p2(::google::protobuf::int64 value);

  // required int32 damage = 4;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 4;
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.CPlayerHit)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_p1();
  inline void clear_has_p1();
  inline void set_has_p2();
  inline void clear_has_p2();
  inline void set_has_damage();
  inline void clear_has_damage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 matchid_;
  ::google::protobuf::int64 p1_;
  ::google::protobuf::int64 p2_;
  ::google::protobuf::int32 damage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_missle_2eproto();
  friend void protobuf_AssignDesc_missle_2eproto();
  friend void protobuf_ShutdownFile_missle_2eproto();

  void InitAsDefaultInstance();
  static CPlayerHit* default_instance_;
};
// -------------------------------------------------------------------

class EPlayerHit : public ::google::protobuf::Message {
 public:
  EPlayerHit();
  virtual ~EPlayerHit();

  EPlayerHit(const EPlayerHit& from);

  inline EPlayerHit& operator=(const EPlayerHit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EPlayerHit& default_instance();

  void Swap(EPlayerHit* other);

  // implements Message ----------------------------------------------

  EPlayerHit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EPlayerHit& from);
  void MergeFrom(const EPlayerHit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 matchId = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchIdFieldNumber = 1;
  inline ::google::protobuf::int64 matchid() const;
  inline void set_matchid(::google::protobuf::int64 value);

  // required int64 p1 = 2;
  inline bool has_p1() const;
  inline void clear_p1();
  static const int kP1FieldNumber = 2;
  inline ::google::protobuf::int64 p1() const;
  inline void set_p1(::google::protobuf::int64 value);

  // required int64 p2 = 3;
  inline bool has_p2() const;
  inline void clear_p2();
  static const int kP2FieldNumber = 3;
  inline ::google::protobuf::int64 p2() const;
  inline void set_p2(::google::protobuf::int64 value);

  // required int32 damage = 4;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 4;
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.EPlayerHit)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_p1();
  inline void clear_has_p1();
  inline void set_has_p2();
  inline void clear_has_p2();
  inline void set_has_damage();
  inline void clear_has_damage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 matchid_;
  ::google::protobuf::int64 p1_;
  ::google::protobuf::int64 p2_;
  ::google::protobuf::int32 damage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_missle_2eproto();
  friend void protobuf_AssignDesc_missle_2eproto();
  friend void protobuf_ShutdownFile_missle_2eproto();

  void InitAsDefaultInstance();
  static EPlayerHit* default_instance_;
};
// ===================================================================


// ===================================================================

// Point

// required float x = 1;
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Point::x() const {
  return x_;
}
inline void Point::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Point::y() const {
  return y_;
}
inline void Point::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// Player

// required int64 id = 1;
inline bool Player::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Player::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Player::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Player::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Player::id() const {
  return id_;
}
inline void Player::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// required string nickName = 2;
inline bool Player::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Player::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Player::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Player::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& Player::nickname() const {
  return *nickname_;
}
inline void Player::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void Player::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void Player::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Player::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* Player::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Player::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string avatar = 3;
inline bool Player::has_avatar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Player::set_has_avatar() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Player::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Player::clear_avatar() {
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    avatar_->clear();
  }
  clear_has_avatar();
}
inline const ::std::string& Player::avatar() const {
  return *avatar_;
}
inline void Player::set_avatar(const ::std::string& value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
}
inline void Player::set_avatar(const char* value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
}
inline void Player::set_avatar(const char* value, size_t size) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Player::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  return avatar_;
}
inline ::std::string* Player::release_avatar() {
  clear_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = avatar_;
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Player::set_allocated_avatar(::std::string* avatar) {
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_;
  }
  if (avatar) {
    set_has_avatar();
    avatar_ = avatar;
  } else {
    clear_has_avatar();
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool isLeft = 4;
inline bool Player::has_isleft() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Player::set_has_isleft() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Player::clear_has_isleft() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Player::clear_isleft() {
  isleft_ = false;
  clear_has_isleft();
}
inline bool Player::isleft() const {
  return isleft_;
}
inline void Player::set_isleft(bool value) {
  set_has_isleft();
  isleft_ = value;
}

// required .pb.Point position = 5;
inline bool Player::has_position() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Player::set_has_position() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Player::clear_has_position() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Player::clear_position() {
  if (position_ != NULL) position_->::pb::Point::Clear();
  clear_has_position();
}
inline const ::pb::Point& Player::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::pb::Point* Player::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::pb::Point;
  return position_;
}
inline ::pb::Point* Player::release_position() {
  clear_has_position();
  ::pb::Point* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Player::set_allocated_position(::pb::Point* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
}

// required int32 health = 6;
inline bool Player::has_health() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Player::set_has_health() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Player::clear_has_health() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Player::clear_health() {
  health_ = 0;
  clear_has_health();
}
inline ::google::protobuf::int32 Player::health() const {
  return health_;
}
inline void Player::set_health(::google::protobuf::int32 value) {
  set_has_health();
  health_ = value;
}

// -------------------------------------------------------------------

// CAuth

// required string userName = 1;
inline bool CAuth::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAuth::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAuth::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAuth::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& CAuth::username() const {
  return *username_;
}
inline void CAuth::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void CAuth::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void CAuth::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAuth::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* CAuth::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAuth::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string password = 2;
inline bool CAuth::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAuth::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAuth::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAuth::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& CAuth::password() const {
  return *password_;
}
inline void CAuth::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void CAuth::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void CAuth::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAuth::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* CAuth::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAuth::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// EAuth

// required int32 code = 1;
inline bool EAuth::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EAuth::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EAuth::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EAuth::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 EAuth::code() const {
  return code_;
}
inline void EAuth::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// optional string message = 2;
inline bool EAuth::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EAuth::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EAuth::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EAuth::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& EAuth::message() const {
  return *message_;
}
inline void EAuth::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void EAuth::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void EAuth::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EAuth::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* EAuth::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EAuth::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMatchEnter

// -------------------------------------------------------------------

// EMatcInit

// required int64 matchId = 1;
inline bool EMatcInit::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EMatcInit::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EMatcInit::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EMatcInit::clear_matchid() {
  matchid_ = GOOGLE_LONGLONG(0);
  clear_has_matchid();
}
inline ::google::protobuf::int64 EMatcInit::matchid() const {
  return matchid_;
}
inline void EMatcInit::set_matchid(::google::protobuf::int64 value) {
  set_has_matchid();
  matchid_ = value;
}

// repeated .pb.Player players = 2;
inline int EMatcInit::players_size() const {
  return players_.size();
}
inline void EMatcInit::clear_players() {
  players_.Clear();
}
inline const ::pb::Player& EMatcInit::players(int index) const {
  return players_.Get(index);
}
inline ::pb::Player* EMatcInit::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::pb::Player* EMatcInit::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Player >&
EMatcInit::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Player >*
EMatcInit::mutable_players() {
  return &players_;
}

// repeated .pb.Point points = 3;
inline int EMatcInit::points_size() const {
  return points_.size();
}
inline void EMatcInit::clear_points() {
  points_.Clear();
}
inline const ::pb::Point& EMatcInit::points(int index) const {
  return points_.Get(index);
}
inline ::pb::Point* EMatcInit::mutable_points(int index) {
  return points_.Mutable(index);
}
inline ::pb::Point* EMatcInit::add_points() {
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Point >&
EMatcInit::points() const {
  return points_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Point >*
EMatcInit::mutable_points() {
  return &points_;
}

// -------------------------------------------------------------------

// EMatchEnd

// required int64 matchId = 1;
inline bool EMatchEnd::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EMatchEnd::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EMatchEnd::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EMatchEnd::clear_matchid() {
  matchid_ = GOOGLE_LONGLONG(0);
  clear_has_matchid();
}
inline ::google::protobuf::int64 EMatchEnd::matchid() const {
  return matchid_;
}
inline void EMatchEnd::set_matchid(::google::protobuf::int64 value) {
  set_has_matchid();
  matchid_ = value;
}

// required int32 points = 2;
inline bool EMatchEnd::has_points() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EMatchEnd::set_has_points() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EMatchEnd::clear_has_points() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EMatchEnd::clear_points() {
  points_ = 0;
  clear_has_points();
}
inline ::google::protobuf::int32 EMatchEnd::points() const {
  return points_;
}
inline void EMatchEnd::set_points(::google::protobuf::int32 value) {
  set_has_points();
  points_ = value;
}

// -------------------------------------------------------------------

// EMatchTurn

// required int64 matchId = 1;
inline bool EMatchTurn::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EMatchTurn::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EMatchTurn::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EMatchTurn::clear_matchid() {
  matchid_ = GOOGLE_LONGLONG(0);
  clear_has_matchid();
}
inline ::google::protobuf::int64 EMatchTurn::matchid() const {
  return matchid_;
}
inline void EMatchTurn::set_matchid(::google::protobuf::int64 value) {
  set_has_matchid();
  matchid_ = value;
}

// required int64 playerId = 2;
inline bool EMatchTurn::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EMatchTurn::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EMatchTurn::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EMatchTurn::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 EMatchTurn::playerid() const {
  return playerid_;
}
inline void EMatchTurn::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// CPlayerMove

// required int64 matchId = 1;
inline bool CPlayerMove::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayerMove::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPlayerMove::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPlayerMove::clear_matchid() {
  matchid_ = GOOGLE_LONGLONG(0);
  clear_has_matchid();
}
inline ::google::protobuf::int64 CPlayerMove::matchid() const {
  return matchid_;
}
inline void CPlayerMove::set_matchid(::google::protobuf::int64 value) {
  set_has_matchid();
  matchid_ = value;
}

// required .pb.Point position = 2;
inline bool CPlayerMove::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPlayerMove::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPlayerMove::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPlayerMove::clear_position() {
  if (position_ != NULL) position_->::pb::Point::Clear();
  clear_has_position();
}
inline const ::pb::Point& CPlayerMove::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::pb::Point* CPlayerMove::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::pb::Point;
  return position_;
}
inline ::pb::Point* CPlayerMove::release_position() {
  clear_has_position();
  ::pb::Point* temp = position_;
  position_ = NULL;
  return temp;
}
inline void CPlayerMove::set_allocated_position(::pb::Point* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
}

// -------------------------------------------------------------------

// EPlayerMove

// required int64 matchId = 1;
inline bool EPlayerMove::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EPlayerMove::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EPlayerMove::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EPlayerMove::clear_matchid() {
  matchid_ = GOOGLE_LONGLONG(0);
  clear_has_matchid();
}
inline ::google::protobuf::int64 EPlayerMove::matchid() const {
  return matchid_;
}
inline void EPlayerMove::set_matchid(::google::protobuf::int64 value) {
  set_has_matchid();
  matchid_ = value;
}

// required int64 playerId = 2;
inline bool EPlayerMove::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EPlayerMove::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EPlayerMove::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EPlayerMove::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 EPlayerMove::playerid() const {
  return playerid_;
}
inline void EPlayerMove::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// required .pb.Point position = 3;
inline bool EPlayerMove::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EPlayerMove::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EPlayerMove::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EPlayerMove::clear_position() {
  if (position_ != NULL) position_->::pb::Point::Clear();
  clear_has_position();
}
inline const ::pb::Point& EPlayerMove::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::pb::Point* EPlayerMove::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::pb::Point;
  return position_;
}
inline ::pb::Point* EPlayerMove::release_position() {
  clear_has_position();
  ::pb::Point* temp = position_;
  position_ = NULL;
  return temp;
}
inline void EPlayerMove::set_allocated_position(::pb::Point* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
}

// -------------------------------------------------------------------

// CPlayerFire

// required int64 matchId = 1;
inline bool CPlayerFire::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayerFire::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPlayerFire::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPlayerFire::clear_matchid() {
  matchid_ = GOOGLE_LONGLONG(0);
  clear_has_matchid();
}
inline ::google::protobuf::int64 CPlayerFire::matchid() const {
  return matchid_;
}
inline void CPlayerFire::set_matchid(::google::protobuf::int64 value) {
  set_has_matchid();
  matchid_ = value;
}

// required int64 playerId = 2;
inline bool CPlayerFire::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPlayerFire::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPlayerFire::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPlayerFire::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 CPlayerFire::playerid() const {
  return playerid_;
}
inline void CPlayerFire::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// required .pb.Point velocity = 3;
inline bool CPlayerFire::has_velocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPlayerFire::set_has_velocity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CPlayerFire::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CPlayerFire::clear_velocity() {
  if (velocity_ != NULL) velocity_->::pb::Point::Clear();
  clear_has_velocity();
}
inline const ::pb::Point& CPlayerFire::velocity() const {
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
inline ::pb::Point* CPlayerFire::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) velocity_ = new ::pb::Point;
  return velocity_;
}
inline ::pb::Point* CPlayerFire::release_velocity() {
  clear_has_velocity();
  ::pb::Point* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline void CPlayerFire::set_allocated_velocity(::pb::Point* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
}

// -------------------------------------------------------------------

// EPlayerFire

// required int64 matchId = 1;
inline bool EPlayerFire::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EPlayerFire::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EPlayerFire::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EPlayerFire::clear_matchid() {
  matchid_ = GOOGLE_LONGLONG(0);
  clear_has_matchid();
}
inline ::google::protobuf::int64 EPlayerFire::matchid() const {
  return matchid_;
}
inline void EPlayerFire::set_matchid(::google::protobuf::int64 value) {
  set_has_matchid();
  matchid_ = value;
}

// required int64 playerId = 2;
inline bool EPlayerFire::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EPlayerFire::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EPlayerFire::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EPlayerFire::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 EPlayerFire::playerid() const {
  return playerid_;
}
inline void EPlayerFire::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// required .pb.Point velocity = 3;
inline bool EPlayerFire::has_velocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EPlayerFire::set_has_velocity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EPlayerFire::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EPlayerFire::clear_velocity() {
  if (velocity_ != NULL) velocity_->::pb::Point::Clear();
  clear_has_velocity();
}
inline const ::pb::Point& EPlayerFire::velocity() const {
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
inline ::pb::Point* EPlayerFire::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) velocity_ = new ::pb::Point;
  return velocity_;
}
inline ::pb::Point* EPlayerFire::release_velocity() {
  clear_has_velocity();
  ::pb::Point* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline void EPlayerFire::set_allocated_velocity(::pb::Point* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
}

// -------------------------------------------------------------------

// CPlayerHit

// required int64 matchId = 1;
inline bool CPlayerHit::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayerHit::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPlayerHit::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPlayerHit::clear_matchid() {
  matchid_ = GOOGLE_LONGLONG(0);
  clear_has_matchid();
}
inline ::google::protobuf::int64 CPlayerHit::matchid() const {
  return matchid_;
}
inline void CPlayerHit::set_matchid(::google::protobuf::int64 value) {
  set_has_matchid();
  matchid_ = value;
}

// required int64 p1 = 2;
inline bool CPlayerHit::has_p1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPlayerHit::set_has_p1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPlayerHit::clear_has_p1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPlayerHit::clear_p1() {
  p1_ = GOOGLE_LONGLONG(0);
  clear_has_p1();
}
inline ::google::protobuf::int64 CPlayerHit::p1() const {
  return p1_;
}
inline void CPlayerHit::set_p1(::google::protobuf::int64 value) {
  set_has_p1();
  p1_ = value;
}

// required int64 p2 = 3;
inline bool CPlayerHit::has_p2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPlayerHit::set_has_p2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CPlayerHit::clear_has_p2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CPlayerHit::clear_p2() {
  p2_ = GOOGLE_LONGLONG(0);
  clear_has_p2();
}
inline ::google::protobuf::int64 CPlayerHit::p2() const {
  return p2_;
}
inline void CPlayerHit::set_p2(::google::protobuf::int64 value) {
  set_has_p2();
  p2_ = value;
}

// required int32 damage = 4;
inline bool CPlayerHit::has_damage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CPlayerHit::set_has_damage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CPlayerHit::clear_has_damage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CPlayerHit::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 CPlayerHit::damage() const {
  return damage_;
}
inline void CPlayerHit::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
}

// -------------------------------------------------------------------

// EPlayerHit

// required int64 matchId = 1;
inline bool EPlayerHit::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EPlayerHit::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EPlayerHit::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EPlayerHit::clear_matchid() {
  matchid_ = GOOGLE_LONGLONG(0);
  clear_has_matchid();
}
inline ::google::protobuf::int64 EPlayerHit::matchid() const {
  return matchid_;
}
inline void EPlayerHit::set_matchid(::google::protobuf::int64 value) {
  set_has_matchid();
  matchid_ = value;
}

// required int64 p1 = 2;
inline bool EPlayerHit::has_p1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EPlayerHit::set_has_p1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EPlayerHit::clear_has_p1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EPlayerHit::clear_p1() {
  p1_ = GOOGLE_LONGLONG(0);
  clear_has_p1();
}
inline ::google::protobuf::int64 EPlayerHit::p1() const {
  return p1_;
}
inline void EPlayerHit::set_p1(::google::protobuf::int64 value) {
  set_has_p1();
  p1_ = value;
}

// required int64 p2 = 3;
inline bool EPlayerHit::has_p2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EPlayerHit::set_has_p2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EPlayerHit::clear_has_p2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EPlayerHit::clear_p2() {
  p2_ = GOOGLE_LONGLONG(0);
  clear_has_p2();
}
inline ::google::protobuf::int64 EPlayerHit::p2() const {
  return p2_;
}
inline void EPlayerHit::set_p2(::google::protobuf::int64 value) {
  set_has_p2();
  p2_ = value;
}

// required int32 damage = 4;
inline bool EPlayerHit::has_damage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EPlayerHit::set_has_damage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EPlayerHit::clear_has_damage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EPlayerHit::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 EPlayerHit::damage() const {
  return damage_;
}
inline void EPlayerHit::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::Code>() {
  return ::pb::Code_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_missle_2eproto__INCLUDED
